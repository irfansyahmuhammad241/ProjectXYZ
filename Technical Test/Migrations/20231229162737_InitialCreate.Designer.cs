// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Technical_Test.Data;

#nullable disable

namespace TechnicalTest.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20231229162737_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Technical_Test.Models.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("companyID");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("approvalStatus");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("companyEmail");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("companyName");

                    b.Property<string>("CompanyPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("companyPhone");

                    b.Property<byte[]>("CompanyPhoto")
                        .IsRequired()
                        .HasColumnType("varbinary(255)")
                        .HasColumnName("companyPhoto");

                    b.HasKey("CompanyID");

                    b.HasIndex("CompanyID", "CompanyEmail")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Technical_Test.Models.ManagerLogistics", b =>
                {
                    b.Property<int>("ManagerID")
                        .HasColumnType("int")
                        .HasColumnName("ManagerID");

                    b.Property<string>("ManagerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("managerEmail");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("managerName");

                    b.Property<string>("ManagerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("managerPhone");

                    b.HasKey("ManagerID");

                    b.HasIndex("ManagerID", "ManagerEmail")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Technical_Test.Models.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("projectName");

                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.HasKey("ProjectID");

                    b.HasIndex("ProjectID")
                        .IsUnique();

                    b.HasIndex("VendorID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Technical_Test.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Email");

                    b.Property<int>("ManagerID")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Password");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("UserType");

                    b.HasKey("UserID");

                    b.HasIndex("CompanyID")
                        .IsUnique();

                    b.HasIndex("UserID", "Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Technical_Test.Models.Vendor", b =>
                {
                    b.Property<int>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("businessType");

                    b.Property<string>("CompanyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("companyType");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("vendorName");

                    b.HasKey("VendorID");

                    b.HasIndex("VendorID")
                        .IsUnique();

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("Technical_Test.Models.ManagerLogistics", b =>
                {
                    b.HasOne("Technical_Test.Models.User", "User")
                        .WithOne("ManagerLogistics")
                        .HasForeignKey("Technical_Test.Models.ManagerLogistics", "ManagerID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Technical_Test.Models.Project", b =>
                {
                    b.HasOne("Technical_Test.Models.Vendor", "Vendor")
                        .WithMany("Projects")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Technical_Test.Models.User", b =>
                {
                    b.HasOne("Technical_Test.Models.Company", "Company")
                        .WithOne("User")
                        .HasForeignKey("Technical_Test.Models.User", "CompanyID");

                    b.HasOne("Technical_Test.Models.Vendor", "Vendor")
                        .WithOne("User")
                        .HasForeignKey("Technical_Test.Models.User", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Technical_Test.Models.Company", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Technical_Test.Models.User", b =>
                {
                    b.Navigation("ManagerLogistics")
                        .IsRequired();
                });

            modelBuilder.Entity("Technical_Test.Models.Vendor", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
